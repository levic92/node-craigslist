{"version":3,"sources":["index.js"],"names":["debug","DEFAULT_BASE_HOST","DEFAULT_CATEGORY","DEFAULT_CATEGORY_DETAILS_INDEX","DEFAULT_PATH","DEFAULT_QUERYSTRING","DEFAULT_REQUEST_OPTIONS","hostname","path","secure","QUERY_KEYS","QUERY_PARAM_MAX","QUERY_PARAM_MIN","QUERY_PARAM_QUERY","QUERY_PARAM_SEARCH_TYPE","RE_HTML","RE_QUALIFIED_URL_RELATIVE","RE_QUALIFIED_URL_RELATIVE_2","RE_TAGS_MAP","_getPostingDetails","postingUrl","markup","$","load","details","description","text","trim","mapUrl","find","attr","pid","substring","search","replace","replyUrl","title","url","each","i","element","infoType","test","split","postedAt","Date","updatedAt","images","push","_getPostings","options","posting","postings","filter","term","length","map","detailsUrl","join","category","coordinates","lat","lon","date","hasPic","location","price","_getReplyDetails","next","li","contactName","parent","value","phoneNumber","indexOf","email","_getRequestOptions","query","requestOptions","JSON","parse","stringify","self","Validation","coalesce","city","baseHost","Object","keys","forEach","key","isEmpty","encodeURIComponent","minAsk","maxAsk","searchType","Client","request","Request","callback","exec","getDetails","Promise","resolve","reject","Error","protocol","get","then","catch","RE_QUALIFIED_URL","promiseOrCallback","undefined"],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\n\nimport 'babel-polyfill';\nimport 'source-map-support/register';\nimport cheerio from 'cheerio';\nimport core from './core.js';\nimport debugLog from 'debug';\nimport url from 'url';\nimport web from './web.js';\n\nconst\n\tdebug = debugLog('craigslist'),\n\tDEFAULT_BASE_HOST = 'craigslist.org',\n\tDEFAULT_CATEGORY = 'sss',\n\tDEFAULT_CATEGORY_DETAILS_INDEX = 1,\n\tDEFAULT_PATH = '/search/',\n\tDEFAULT_QUERYSTRING = '?sort=rel',\n\tDEFAULT_REQUEST_OPTIONS = {\n\t\thostname : '',\n\t\tpath : '',\n\t\tsecure : true\n\t},\n\tQUERY_KEYS = [\n\t\t'category',\n\t\t'maxAsk',\n\t\t'minAsk',\n\t\t'query',\n\t\t'searchType'\n\t],\n\tQUERY_PARAM_MAX = '&maxAsk=',\n\tQUERY_PARAM_MIN = '&minAsk=',\n\tQUERY_PARAM_QUERY = '&query=',\n\tQUERY_PARAM_SEARCH_TYPE = '&srchType=',\n\tRE_HTML = /\\.htm(l)?/i,\n\t// ex: //vancouver.craigslist.ca/......\n\tRE_QUALIFIED_URL_RELATIVE = /^\\/\\/[a-z0-9\\-]*\\.craigslist\\.[a-z]*/i,\n\t// ex: /van/cto/d/asdasd-asdasd/2345345.html\n\tRE_QUALIFIED_URL_RELATIVE_2 = /^\\//i,\n\tRE_TAGS_MAP = /map/i;\n\n/**\n * Accepts strong of HTML and parses that string to find key details.\n *\n * @param {string} postingUrl - URL that details were loaded from\n * @param {string} markup - Markup from the request to Craigslist\n * @returns {object} details - The processed details from the Craigslist posting\n **/\nfunction _getPostingDetails (postingUrl, markup) {\n\tlet\n\t\t$ = cheerio.load(markup),\n\t\tdetails = {};\n\n\tdetails.description = ($('#postingbody').text() || '').trim();\n\tdetails.mapUrl = $('div.mapbox p.mapaddress')\n\t\t.find('a')\n\t\t.attr('href');\n\tdetails.pid = postingUrl\n\t\t.substring(postingUrl.search(/[0-9]*\\.html/))\n\t\t.replace(/\\.html/, '');\n\tdetails.replyUrl = ($('#replylink').attr('href') || '').trim();\n\tdetails.title = ($('#titletextonly').text() || '').trim();\n\tdetails.url = postingUrl;\n\n\t// populate posting info\n\t$('div.postinginfos').find('.postinginfo').each((i, element) => {\n\t\tlet infoType = $(element).text();\n\n\t\t// set pid (a backup to ripping it from the URL)\n\t\tif (/post\\sid/i.test(infoType)) {\n\t\t\tdetails.pid = (infoType.split(/\\:/)[1] || '').trim();\n\t\t\treturn;\n\t\t}\n\n\t\t// set postedAt\n\t\tif (/posted/i.test(infoType) && $(element).find('time').attr('datetime')) {\n\t\t\tdetails.postedAt = new Date($(element).find('time').attr('datetime'));\n\t\t\treturn;\n\t\t}\n\n\t\t// set updatedAt\n\t\tif (/updated/i.test(infoType) && $(element).find('time').attr('datetime')) {\n\t\t\tdetails.updatedAt = new Date($(element).find('time').attr('datetime'));\n\t\t\treturn;\n\t\t}\n\t});\n\n\t// populate posting photos\n\t$('#thumbs').find('a').each((i, element) => {\n\t\tdetails.images = details.images || [];\n\t\tdetails.images.push(($(element).attr('href') || '').trim());\n\t});\n\n\treturn details;\n}\n\n/**\n * Accepts string of HTML and parses that string to find all pertinent postings.\n *\n * @param {object} options - Request options used for the request to craigslist\n * @param {string} markup - Markup from the request to Craigslist\n * @returns {Array} postings - The processed and normalized array of postings\n **/\nfunction _getPostings (options, markup) {\n\tlet\n\t\t$ = cheerio.load(markup),\n\t\thostname = options.hostname,\n\t\tposting = {},\n\t\tpostings = [],\n\t\tsecure = options.secure;\n\n\t$('div.content')\n\t\t.find('.result-row')\n\t\t.each((i, element) => {\n\t\t\tlet\n\t\t\t\t// introducing fix for #11 - Craigslist markup changed\n\t\t\t\tdetails = $(element)\n\t\t\t\t\t.find('.result-title')\n\t\t\t\t\t.attr('href')\n\t\t\t\t\t.split(/\\//g)\n\t\t\t\t\t.filter((term) => term.length)\n\t\t\t\t\t.map((term) => term.split(RE_HTML)[0]),\n\t\t\t\tdetailsUrl = $(element)\n\t\t\t\t\t.find('.result-title')\n\t\t\t\t\t.attr('href');\n\n\t\t\tif (RE_QUALIFIED_URL_RELATIVE.test(detailsUrl)) {\n\t\t\t\tdetailsUrl = [\n\t\t\t\t\t(secure ? 'https:' : 'http:'),\n\t\t\t\t\tdetailsUrl].join('');\n\t\t\t}\n\t\t\telse if (RE_QUALIFIED_URL_RELATIVE_2.test(detailsUrl)) {\n\t\t\t\tdetailsUrl = [\n\t\t\t\t\t(secure ? 'https://' : 'http://'),\n\t\t\t\t\thostname,\n\t\t\t\t\tdetailsUrl].join('');\n\t\t\t}\n\t\t\t// else it is a fully quailified url\n\n\t\t\tposting = {\n\t\t\t\tcategory : details[DEFAULT_CATEGORY_DETAILS_INDEX],\n\t\t\t\tcoordinates : {\n\t\t\t\t\tlat : $(element).attr('data-latitude'),\n\t\t\t\t\tlon : $(element).attr('data-longitude')\n\t\t\t\t},\n\t\t\t\tdate : ($(element)\n\t\t\t\t\t.find('time')\n\t\t\t\t\t.attr('datetime') || '')\n\t\t\t\t\t\t.trim(),\n\t\t\t\thasPic : RE_TAGS_MAP\n\t\t\t\t\t.test($(element)\n\t\t\t\t\t\t.find('.result-tags')\n\t\t\t\t\t\t.text() || ''),\n\t\t\t\tlocation : ($(element)\n\t\t\t\t\t.find('.result-hood')\n\t\t\t\t\t.text() || '')\n\t\t\t\t\t.trim(),\n\t\t\t\tpid : ($(element)\n\t\t\t\t\t.attr('data-pid') || '')\n\t\t\t\t\t\t.trim(),\n\t\t\t\tprice : ($(element)\n\t\t\t\t\t.find('.result-meta .result-price')\n\t\t\t\t\t.text() || '')\n\t\t\t\t\t\t.replace(/^\\&\\#x0024\\;/g, '')\n\t\t\t\t\t\t.trim(), // sanitize\n\t\t\t\ttitle : ($(element)\n\t\t\t\t\t.find('.result-title')\n\t\t\t\t\t.text() || '')\n\t\t\t\t\t\t.trim(),\n\t\t\t\turl : detailsUrl\n\t\t\t};\n\n\t\t\t// make sure lat / lon is valid\n\t\t\tif (typeof posting.coordinates.lat === 'undefined' ||\n\t\t\t\ttypeof posting.coordinates.lon === 'undefined') {\n\t\t\t\tdelete posting.coordinates;\n\t\t\t}\n\n\t\t\tpostings.push(posting);\n\t\t});\n\n\treturn postings;\n}\n\n/**\n * Accepts strong of HTML and parses that string to find key details.\n *\n * @param {object} details - a posting object to populate\n * @param {string} markup - Markup from the request to Craigslist\n * @returns {null} - Returns empty\n **/\nfunction _getReplyDetails (details, markup) {\n\tlet $ = cheerio.load(markup);\n\n\t$('div.reply_options').find('b').each((i, element) => {\n\t\tlet infoType = $(element).text().trim();\n\n\t\t// set contact name\n\t\tif (/contact\\sname/i.test(infoType)) {\n\t\t\t$(element).next().find('li').each((i, li) => {\n\t\t\t\tdetails.contactName = $(li).text().trim();\n\t\t\t});\n\n\t\t\treturn;\n\t\t}\n\n\t\t// set phone number and email\n\t\tif (/call/i.test(infoType)) {\n\t\t\t$(element).parent().find('li').each((i, li) => {\n\t\t\t\tlet value = $(li).text().trim();\n\n\t\t\t\t// check for phone value (based on the emoji)\n\t\t\t\tif (/\\u260E/.test(value)) {\n\t\t\t\t\tdetails.phoneNumber = value.substring(value.indexOf('('));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// check for email value (based on the @ symbol)\n\t\t\t\tif (/\\@/.test(value)) {\n\t\t\t\t\tdetails.email = value;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn;\n\t\t}\n\t});\n}\n\n/**\n * Accepts options, iterates through the known acceptable keys from defaultOptions\n * and if found in input options, uses that. If not found in input options to method,\n * falls back to the options specified when the module was initialized. If not found\n * in initialization options, uses the default options setting. All keys provided in\n * the input options variable are retained.\n *\n * @param {object} options - Input options for the web request\n * @param {string} query - A querystring\n * @returns {object} options - The coalesced result of options\n **/\nfunction _getRequestOptions (options, query) {\n\tvar\n\t\trequestOptions = JSON.parse(JSON.stringify(DEFAULT_REQUEST_OPTIONS)),\n\t\t/*eslint no-invalid-this:0*/\n\t\tself = this;\n\n\t// ensure default options are set, even if omitted from input options\n\trequestOptions.hostname = [\n\t\tcore.Validation.coalesce(options.city, self.options.city, ''),\n\t\t// introducing fix for #7\n\t\tcore.Validation.coalesce(\n\t\t\toptions.baseHost,\n\t\t\tself.options.baseHost,\n\t\t\tDEFAULT_BASE_HOST)\n\t].join('.');\n\n\t// preserve any extraneous input option keys (may have addition instructions for underlying request object)\n\tObject\n\t\t.keys(options)\n\t\t.forEach((key) => {\n\t\t\tif (!QUERY_KEYS.indexOf(key) &&\n\t\t\t\tcore.Validation.isEmpty(requestOptions[key]) &&\n\t\t\t\tcore.Validation.isEmpty(DEFAULT_REQUEST_OPTIONS[key])) {\n\t\t\t\trequestOptions[key] = options[key];\n\t\t\t}\n\t\t});\n\n\t// setup path\n\tif (core.Validation.isEmpty(requestOptions.path)) {\n\t\trequestOptions.path = DEFAULT_PATH;\n\t}\n\n\t// setup category\n\trequestOptions.path = [\n\t\trequestOptions.path,\n\t\tcore.Validation.coalesce(options.category, DEFAULT_CATEGORY)].join('');\n\n\t// setup querystring\n\trequestOptions.path = [requestOptions.path, DEFAULT_QUERYSTRING].join('');\n\n\t// add search query (if specified)\n\tif (!core.Validation.isEmpty(query)) {\n\t\trequestOptions.path = [\n\t\t\trequestOptions.path,\n\t\t\tQUERY_PARAM_QUERY,\n\t\t\tencodeURIComponent(query)].join('');\n\t}\n\n\t// add min asking price (if specified)\n\tif (!core.Validation.isEmpty(options.minAsk)) {\n\t\trequestOptions.path = [\n\t\t\trequestOptions.path,\n\t\t\tQUERY_PARAM_MIN,\n\t\t\toptions.minAsk].join('');\n\t}\n\n\t// add max asking price (if specified)\n\tif (!core.Validation.isEmpty(options.maxAsk)) {\n\t\trequestOptions.path = [\n\t\t\trequestOptions.path,\n\t\t\tQUERY_PARAM_MAX,\n\t\t\toptions.maxAsk].join('');\n\t}\n\n\t// add search type (if specified)\n\tif (!core.Validation.isEmpty(options.searchType)) {\n\t\trequestOptions.path = [\n\t\t\trequestOptions.path,\n\t\t\tQUERY_PARAM_SEARCH_TYPE,\n\t\t\toptions.searchType].join('');\n\t}\n\n\tdebug('setting request options: %o', requestOptions);\n\n\treturn requestOptions;\n}\n\nexport class Client {\n\tconstructor(options) {\n\t\tthis.options = options || {};\n\t\tthis.request = new web.Request(this.options);\n\t}\n\n\tdetails (posting, callback) {\n\t\tlet\n\t\t\texec,\n\t\t\tgetDetails,\n\t\t\tpostingUrl,\n\t\t\trequestOptions,\n\t\t\tself = this;\n\n\t\t// retrieves the posting details directly\n\t\tgetDetails = new Promise((resolve, reject) => {\n\t\t\tif (core.Validation.isEmpty(posting)) {\n\t\t\t\treturn reject(new Error('posting URL is required'));\n\t\t\t}\n\n\t\t\tif (typeof posting !== 'string' && core.Validation.isEmpty(posting.url)) {\n\t\t\t\treturn reject(new Error('posting URL is required'));\n\t\t\t}\n\n\t\t\tpostingUrl = typeof posting === 'string' ? posting : posting.url;\n\t\t\trequestOptions = url.parse(postingUrl);\n\t\t\trequestOptions.secure = /https/i.test(requestOptions.protocol);\n\n\t\t\tdebug('request options set to: %o', requestOptions);\n\n\t\t\treturn self.request\n\t\t\t\t.get(requestOptions)\n\t\t\t\t.then((markup) => {\n\t\t\t\t\tdebug('retrieved posting %o', posting);\n\t\t\t\t\tlet details = self::_getPostingDetails(postingUrl, markup);\n\n\t\t\t\t\treturn resolve(details);\n\t\t\t\t})\n\t\t\t\t.catch(reject);\n\t\t});\n\n\t\texec = new Promise((resolve, reject) => {\n\t\t\treturn getDetails\n\t\t\t\t.then((details) => {\n\t\t\t\t\tif (!details.replyUrl) {\n\t\t\t\t\t\treturn resolve(details);\n\t\t\t\t\t}\n\n\t\t\t\t\t// properly adjust reply URL\n\t\t\t\t\tif (!RE_QUALIFIED_URL.test(details.replyUrl)) {\n\t\t\t\t\t\tdetails.replyUrl = [\n\t\t\t\t\t\t\t'http://',\n\t\t\t\t\t\t\trequestOptions.hostname,\n\t\t\t\t\t\t\tdetails.replyUrl].join('');\n\t\t\t\t\t}\n\n\t\t\t\t\t// set request options to retrieve posting contact info\n\t\t\t\t\trequestOptions = url.parse(details.replyUrl);\n\n\t\t\t\t\treturn self.request\n\t\t\t\t\t\t.get(requestOptions)\n\t\t\t\t\t\t.then((markup) => {\n\t\t\t\t\t\t\tself::_getReplyDetails(details, markup);\n\n\t\t\t\t\t\t\treturn resolve(details);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(reject);\n\t\t\t\t})\n\t\t\t\t.catch(reject);\n\t\t});\n\n\t\t// execute!\n\t\treturn core.Validation.promiseOrCallback(exec, callback);\n\t}\n\n\tlist (options, callback) {\n\t\t/*eslint no-undefined:0*/\n\t\treturn this.search(options, undefined, callback);\n\t}\n\n\tsearch (options, query, callback) {\n\t\tif (typeof query === 'function' && core.Validation.isEmpty(callback)) {\n\t\t\tcallback = query;\n\t\t\tquery = typeof options === 'string' ? options : query;\n\t\t\toptions = typeof options === 'string' ? {} : options;\n\t\t}\n\n\t\tif (core.Validation.isEmpty(query) && typeof options === 'string') {\n\t\t\tquery = options;\n\t\t\toptions = {};\n\t\t}\n\n\t\tif (typeof options === 'function') {\n\t\t\tcallback = options;\n\t\t\toptions = {};\n\t\t\t/*eslint no-undefined:0*/\n\t\t\tquery = undefined;\n\t\t}\n\n\t\t// ensure options is at least a blank object before continuing\n\t\toptions = options || {};\n\n\t\tlet\n\t\t\texec,\n\t\t\tself = this;\n\n\t\t// create a Promise to execute the request\n\t\texec = new Promise((resolve, reject) => {\n\t\t\t// remap options for the request\n\t\t\tlet requestOptions = this::_getRequestOptions(options, query);\n\n\t\t\tdebug('request options set to: %o', requestOptions);\n\n\t\t\tif (core.Validation.isEmpty(requestOptions.hostname)) {\n\t\t\t\treturn reject(\n\t\t\t\t\tnew Error(\n\t\t\t\t\t\t'unable to set hostname (check to see if city is specified)'));\n\t\t\t}\n\n\t\t\treturn self.request\n\t\t\t\t.get(requestOptions)\n\t\t\t\t.then((markup) => {\n\t\t\t\t\tlet postings = _getPostings(requestOptions, markup);\n\t\t\t\t\tdebug('found %d postings', postings.length);\n\n\t\t\t\t\treturn resolve(postings);\n\t\t\t\t})\n\t\t\t\t.catch(reject);\n\t\t});\n\n\t\t// execute!\n\t\treturn core.Validation.promiseOrCallback(exec, callback);\n\t}\n}\n\nexport default { Client }\n"]}